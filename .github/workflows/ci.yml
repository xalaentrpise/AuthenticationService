name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  PACKAGE_PATH: './packages/authentication'

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run type checking
        run: npm run type-check
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run linting
        run: npm run lint
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run unit tests
        run: npm test -- --coverage --ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run integration tests
        run: npm run test:integration
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.PACKAGE_PATH }}/coverage/lcov.info
          fail_ci_if_error: true

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run npm audit
        run: npm audit --audit-level=moderate
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium --file=${{ env.PACKAGE_PATH }}/package.json
          
      - name: Run CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        
      - name: Run secret scanning
        run: |
          # Custom secret scanning script
          node scripts/validate-auth.js
          
      - name: Check for hardcoded secrets
        run: |
          # Scan for potential secrets in code
          if grep -r "password\|secret\|token\|key" ${{ env.PACKAGE_PATH }}/src --include="*.ts" --include="*.js" | grep -v "\.test\." | grep -v "\.spec\."; then
            echo "Potential hardcoded secrets found"
            exit 1
          fi

  compliance:
    name: Compliance Check
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Check GDPR compliance
        run: |
          # Check for GDPR compliance patterns
          echo "Checking GDPR compliance..."
          if ! grep -r "gdpr\|GDPR\|data.protection\|privacy" ${{ env.PACKAGE_PATH }}/src; then
            echo "GDPR compliance checks missing"
            exit 1
          fi
          
      - name: Check Norwegian compliance
        run: |
          # Check for Norwegian compliance patterns
          echo "Checking Norwegian compliance..."
          if ! grep -r "NSM\|Digdir\|norwegian" ${{ env.PACKAGE_PATH }}/src; then
            echo "Norwegian compliance patterns missing"
            exit 1
          fi
          
      - name: Validate encryption standards
        run: |
          # Check for approved encryption algorithms
          echo "Validating encryption standards..."
          if grep -r "md5\|sha1\|DES\|RC4" ${{ env.PACKAGE_PATH }}/src; then
            echo "Weak encryption algorithms found"
            exit 1
          fi
          
      - name: Check audit logging
        run: |
          # Verify audit logging implementation
          echo "Checking audit logging..."
          if ! grep -r "audit\|log\|compliance" ${{ env.PACKAGE_PATH }}/src; then
            echo "Audit logging implementation missing"
            exit 1
          fi
          
      - name: License compliance check
        run: |
          npx license-checker --onlyAllow 'MIT;Apache-2.0;BSD-2-Clause;BSD-3-Clause;ISC' --production
        working-directory: ${{ env.PACKAGE_PATH }}

  performance:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run performance tests
        run: npm run test:performance
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Bundle size analysis
        run: |
          npm run build
          npx bundlesize
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Memory leak detection
        run: |
          # Run memory leak detection tests
          node --expose-gc ${{ env.PACKAGE_PATH }}/__tests__/performance/memory-leak.test.js
          
      - name: Load testing
        run: |
          # Run load tests for authentication flows
          npm run test:load
        working-directory: ${{ env.PACKAGE_PATH }}

  e2e:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Install Playwright browsers
        run: npx playwright install --with-deps
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Run E2E tests
        run: npm run test:e2e
        working-directory: ${{ env.PACKAGE_PATH }}
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ${{ env.PACKAGE_PATH }}/playwright-report/
          retention-days: 30

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: [test, security, compliance, performance]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Build package
        run: npm run build
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Pack package
        run: npm pack
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-build
          path: |
            ${{ env.PACKAGE_PATH }}/dist/
            ${{ env.PACKAGE_PATH }}/*.tgz
          retention-days: 7

  publish:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Install package dependencies
        run: npm ci
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Build package
        run: npm run build
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Verify package contents
        run: |
          npm pack --dry-run
          ls -la dist/
        working-directory: ${{ env.PACKAGE_PATH }}
        
      - name: Publish to NPM
        run: npm publish --access public
        working-directory: ${{ env.PACKAGE_PATH }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create GitHub release assets
        run: |
          tar -czf xala-authentication-${{ github.ref_name }}.tar.gz -C ${{ env.PACKAGE_PATH }} dist/
          
      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ./xala-authentication-${{ github.ref_name }}.tar.gz
          asset_name: xala-authentication-${{ github.ref_name }}.tar.gz
          asset_content_type: application/gzip

  notify:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [publish]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.publish.result == 'success'
        run: |
          echo "Package published successfully!"
          # Add Slack/Teams notification here
          
      - name: Notify on failure
        if: needs.publish.result == 'failure'
        run: |
          echo "Package publishing failed!"
          # Add Slack/Teams notification here
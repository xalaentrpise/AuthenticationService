
## ➕ ✅ **Adding New Auth Providers (Google, Facebook, Email, Vipps, SMS, Passwordless)**

This section defines the **architecture, interfaces, configuration, and test requirements** for adding **non-Norwegian providers** to our `@xala-technologies/authentication` package.

### 🔐 8. Additional Auth Providers

#### 🟦 Google OAuth2

* [ ] Create `GoogleOAuthProvider` implementing `IAuthProvider`
* [ ] Use Google’s OAuth 2.0 flow with PKCE
* [ ] Retrieve user info from Google API
* [ ] Map email → user identity in platform
* [ ] Add `GOOGLE_CLIENT_ID` and `GOOGLE_CLIENT_SECRET` to `.env`

#### 🟦 Facebook OAuth2

* [ ] Create `FacebookOAuthProvider` implementing `IAuthProvider`
* [ ] Integrate Facebook Login API
* [ ] Map `facebookId` to internal user
* [ ] Add `FACEBOOK_APP_ID` and `FACEBOOK_APP_SECRET` to `.env`

#### 📧 Email/Password

* [ ] Create `EmailAuthProvider` with:

  * [ ] Registration + hashed password (bcrypt or Argon2)
  * [ ] Login and password verification
  * [ ] Password reset with token expiration
* [ ] Store `email` + `hashedPassword` in secure table

#### 🔄 Passwordless (Email Magic Link)

* [ ] Create `MagicLinkAuthProvider`
* [ ] Generate signed one-time token (JWT or random UUID)
* [ ] Send via email using `@xala-technologies/notification-service`
* [ ] Verify and authenticate link within TTL

#### 📱 SMS-based OTP

* [ ] Create `SMSOTPAuthProvider`
* [ ] Generate OTP code (6-digit)
* [ ] Send via SMS using integration from `@xala-technologies/notification-service`
* [ ] Store hash of OTP temporarily in cache (Redis)
* [ ] Implement time-bound verification + throttling

#### 💳 Vipps Login

* [ ] Create `VippsAuthProvider`
* [ ] Integrate Vipps Login ([https://developer.vippsmobilepay.com](https://developer.vippsmobilepay.com))
* [ ] Handle redirect callback + token exchange
* [ ] Map user to platform identity via `pid` or `email`

---

### 🛠 Shared Tasks for All Providers

* [ ] Update `IAuthProvider` interface to standardize:

  * `authenticate(credentials)`
  * `getUserProfile(token)`
  * `getRedirectURL(state)`
  * `handleCallback(params)`

* [ ] Update `providers/index.ts` to auto-register all providers

* [ ] Add dynamic provider selector (based on tenant config)

* [ ] Inject via DI container or provider registry

---

### 🧪 Testing & Mocks

* [ ] Add mock provider classes in `__mocks__`
* [ ] Create end-to-end test flows:

  * [ ] Google, Facebook → Login via redirect flow
  * [ ] Email → Register, Login, Reset Password
  * [ ] Passwordless → Send + Verify magic link
  * [ ] SMS → Send + Verify OTP
  * [ ] Vipps → Callback → Token → User map

---

### 📚 Documentation

* [ ] Create `docs/providers/` for each provider
* [ ] Add configuration instructions per tenant
* [ ] Include fallback guides for custom UIs
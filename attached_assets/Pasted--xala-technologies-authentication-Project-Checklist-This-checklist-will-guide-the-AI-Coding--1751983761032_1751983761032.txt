## ✅ @xala-technologies/authentication — Project Checklist

This checklist will guide the AI Coding Agent in implementing the **authentication package**, which supports Norwegian-compliant authentication and authorization. The agent must follow **SOLID principles**, include **100% test coverage**, and prepare for **Supabase (XalaBase)** integration.

---

### 📦 Setup & Scaffolding

* [ ] Create `packages/authentication` folder inside the monorepo
* [ ] Initialize `package.json` with name `@xala-technologies/authentication`
* [ ] Add TypeScript, ESLint, Prettier configs
* [ ] Setup `tsconfig.json` with `@xala-technologies/types` support
* [ ] Create `src/` folder structure

  * [ ] `src/core/`
  * [ ] `src/providers/`
  * [ ] `src/middleware/`
  * [ ] `src/permissions/`
  * [ ] `src/compliance/`
  * [ ] `__tests__/`
  * [ ] `README.md`

---

### 🔐 1. Core Authentication Modules

#### Auth Core

* [ ] Define `IAuthService` interface
* [ ] Implement `AuthService` with login, logout, session management
* [ ] Add JWT generation + refresh token support
* [ ] Add session expiration config (per user type)
* [ ] Integrate with Supabase session context

#### Auth Tokens

* [ ] Implement access token service
* [ ] Implement refresh token strategy
* [ ] Add token signing with private/public keys
* [ ] Add support for `x-user-role`, `x-org-id`, `x-scope` headers

---

### 🌐 2. Authentication Providers

* [ ] Create `src/providers/` folder
* [ ] Add `SupabaseAuthProvider` wrapper
* [ ] Implement `ID-portenAuthProvider`
* [ ] Implement `BankIDAuthProvider`
* [ ] Implement `FeideAuthProvider`
* [ ] Implement `MinIDAuthProvider`
* [ ] Implement fallback `DevAuthProvider` for local dev
* [ ] Include OIDC metadata import and JWKS support

#### Additional Providers

* [ ] GoogleOAuthProvider
* [ ] FacebookOAuthProvider
* [ ] EmailAuthProvider (with reset + bcrypt)
* [ ] MagicLinkAuthProvider
* [ ] SMSOTPAuthProvider
* [ ] VippsAuthProvider

---

### 🧱 3. Middleware & Permissions

#### Middleware

* [ ] Create `withAuthContext()` middleware
* [ ] Validate JWT from request header or cookie
* [ ] Extract user, roles, tenant, and permissions
* [ ] Inject context into `req.context`

#### Permissions

* [ ] Implement RBAC system with role hierarchy
* [ ] Add `checkPermission(user, action, resource)` utility
* [ ] Integrate with organization/tenant context
* [ ] Include fine-grained municipal hierarchy support

---

### 📜 4. Compliance

* [ ] Log auth events in compliance-safe format
* [ ] Encrypt logs using NSM-compliant cipher (ChaCha20-Poly1305)
* [ ] Add GDPR consent capture and storage utility
* [ ] Store timestamps and origin of consent
* [ ] Create `audit.json` schema for external audit logs

---

### 🧪 5. Testing

* [ ] Setup Jest config for `@xala-technologies/authentication`
* [ ] Add mock Supabase context
* [ ] Add mock BankID / Feide / ID-porten services
* [ ] Mock Email, Google, Facebook, Vipps, MagicLink, SMS providers
* [ ] Create 100% unit test coverage for all modules
* [ ] Add integration tests for:

  * [ ] Auth flow (login, logout, refresh)
  * [ ] Session persistence
  * [ ] Permissions middleware
  * [ ] External provider callbacks (OIDC, JWT, redirects)
  * [ ] OTP + Email + Magic Link flows
  * [ ] Failed login attempts + security response
  * [ ] JWT expiry and rotation handling

---

### 🔧 6. Developer Experience

* [ ] Setup `validate:auth` script to ensure:

  * [ ] No hardcoded secrets
  * [ ] JWT config is valid
  * [ ] Role definitions exist for all use cases
* [ ] Setup `dev:start` script with mock providers
* [ ] Setup lint + typecheck scripts
* [ ] Add documentation for:

  * [ ] Setup
  * [ ] Integration with Supabase
  * [ ] Provider config
  * [ ] Middleware injection
  * [ ] Token strategies

---

### 🔗 7. Integration with XalaBase (Supabase Fork)

* [ ] Add hook to register new providers in Supabase Auth UI
* [ ] Patch Supabase studio to show ID-porten, Feide, BankID, Vipps, etc.
* [ ] Ensure JWT config matches Supabase expectations
* [ ] Allow use of this module as a plug-and-play package in XalaBase
* [ ] Extend Supabase CLI auth workflows for local dev

---

### 🧑‍💼 8. User Stories

#### 👤 Story 1: Norwegian User (BankID Login)

> As a citizen using BankID, I want to log in securely using my Norwegian digital ID so that I can access my bookings in compliance with NSM standards.

* [ ] Trigger BankID flow
* [ ] Handle OIDC callback
* [ ] Fetch JWT and user context
* [ ] Redirect to dashboard

#### 🌍 Story 2: International User (Google Login)

> As an international user, I want to log in using Google OAuth so that I can authenticate without creating a separate account.

* [ ] Select Google from provider list
* [ ] Authenticate via Google
* [ ] Link to existing or new user account
* [ ] Store token and session context

#### ✉️ Story 3: Local User (Passwordless Login)

> As a user without an identity provider, I want to login via email magic link so I can still access the service securely.

* [ ] Enter email address
* [ ] Receive link with OTP token
* [ ] Click link and authenticate
* [ ] Start secure session

---

### 📁 Deliverables

* [ ] `@xala-technologies/authentication` package fully scaffolded
* [ ] 100% test coverage
* [ ] All Norwegian and global providers mocked + tested
* [ ] README with setup + integration docs
* [ ] Integration-ready for Supabase/XalaBase
* [ ] Mock output available for AI Builder
